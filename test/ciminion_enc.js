
/* Decryption test for Ciminion circuit */

const chai = require("chai");
const path = require("path");
const F1Field = require("ffjavascript").F1Field;
const Scalar = require("ffjavascript").Scalar;
exports.p = Scalar.fromString("21888242871839275222246405745257275088548364400416034343698204186575808495617");
const Fr = new F1Field(exports.p);

const wasm_tester = require("circom_tester").wasm;

const assert = chai.assert;

describe("Ciminion - encryption operation", function ()  {

    this.timeout(100000);

    it("Authentication tag check", async() => {

        const ciminion_input = {
            "MK_0": "0",
            "MK_1": "0",
            "nonce": "1",
            "IV": "1",
            "PT": ["21888242871839275222246405745257275088548364400416034343692024637573625142322", "21888242871839275222246405745257275088548364400416034343693920155242279081918", "21888242871839275222246405745257275088548364400416034343692024637573625142322", "21888242871839275222246405745257275088548364400416034343693920155242279081918"]
          
          };

          const ciminion_input_dec = {
            "MK_0": "0",
            "MK_1": "0",
            "nonce": "1",
            "IV": "1",
            "CT": ["21592519839218542425120198614531742298033892440087867998118713380820756220718","7889798674627961413366316750795654309310714845357364960283444849787781529858","21049421697506414118152249991945313702405695293538082623907752021251428302407","5714257272097132615426035247399194719164619087183836862864633319728296164225"]
          };

        const circuit = await wasm_tester(path.join(__dirname, "circuits", "ciminion_enc.circom"));
        const circuit_dec = await wasm_tester(path.join(__dirname, "circuits", "ciminion_dec.circom"));

        let witness;
        let witness_dec;

        witness = await circuit.calculateWitness(ciminion_input, true);

        await circuit.assertOut(witness, {"TAG": "1300322832108596540141310981879129316384285895603221372961580627161106587830"});
        await circuit.assertOut(witness, {"CT": ["21592519839218542425120198614531742298033892440087867998118713380820756220718","7889798674627961413366316750795654309310714845357364960283444849787781529858","21049421697506414118152249991945313702405695293538082623907752021251428302407","5714257272097132615426035247399194719164619087183836862864633319728296164225"]});
    
    });

    it("Decryption check", async() => {

      const ciminion_input = {
          "MK_0": "0",
          "MK_1": "0",
          "nonce": "1",
          "IV": "1",
          "PT": ["21888242871839275222246405745257275088548364400416034343692024637573625142322", "21888242871839275222246405745257275088548364400416034343693920155242279081918", "21888242871839275222246405745257275088548364400416034343692024637573625142322", "21888242871839275222246405745257275088548364400416034343693920155242279081918"]
        
        };

        const ciminion_input_dec = {
          "MK_0": "0",
          "MK_1": "0",
          "nonce": "1",
          "IV": "1",
          "CT": ["21592519839218542425120198614531742298033892440087867998118713380820756220718","7889798674627961413366316750795654309310714845357364960283444849787781529858","21049421697506414118152249991945313702405695293538082623907752021251428302407","5714257272097132615426035247399194719164619087183836862864633319728296164225"]
        };


        
      const circuit_dec = await wasm_tester(path.join(__dirname, "circuits", "ciminion_dec.circom"));
      let witness_dec;
      witness_dec = await circuit_dec.calculateWitness(ciminion_input_dec, true);

      await circuit_dec.assertOut(witness_dec, {"PT": ["21888242871839275222246405745257275088548364400416034343692024637573625142322", "21888242871839275222246405745257275088548364400416034343693920155242279081918", "21888242871839275222246405745257275088548364400416034343692024637573625142322", "21888242871839275222246405745257275088548364400416034343693920155242279081918"]});

  });


  it("MAC recheck", async() => {

      const ciminion_input_dec = {
        "MK_0": "0",
        "MK_1": "0",
        "nonce": "1",
        "IV": "1",
        "CT": ["21592519839218542425120198614531742298033892440087867998118713380820756220718","7889798674627961413366316750795654309310714845357364960283444849787781529858","21049421697506414118152249991945313702405695293538082623907752021251428302407","5714257272097132615426035247399194719164619087183836862864633319728296164225"]
      };

    const circuit_mac = await wasm_tester(path.join(__dirname, "circuits", "ciminion_mac.circom"));

    let witness_mac;

    witness_mac = await circuit_mac.calculateWitness(ciminion_input_dec, true);

    await circuit_mac.assertOut(witness_mac, {"TAG": "1300322832108596540141310981879129316384285895603221372961580627161106587830"});

});

});
